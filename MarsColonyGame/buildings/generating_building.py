from buildings.building import Building
from abc import ABC, abstractmethod

class GeneratingBuilding(Building, ABC):
    """
    Abstract class representing a generating building in the MarsColony game.
    Inherits from Building and ABC (Abstract Base Class).
    """

    def __init__(self, resource_type: str) -> None:
        """
        Initialize a GeneratingBuilding object.

        Args:
            resource_type (str): The type of resource generated by the building.
        """
        super().__init__()
        self.ressource_type: str = resource_type
        self.needs_manpower: bool = True 
        #self.is_powered: bool = False 
        #self.is_man_powered: bool = False  

    @abstractmethod
    def generate_ressource(self) -> int:
        """
        Abstract method to generate a resource.
        Must be implemented by subclasses.
        
        Returns:
            int: The amount of resource generated.
        """
        pass
    
